* Week 1
** day 1:
syllabus
hello world

** day 2:
standard tutorials: https://docs.oracle.com/javase/tutorial/index.html
*** primitive-ish types:
https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
**** integer: long (64), int (32), short (16), byte (8)

no unsigned versions

++var, var++

decimal, hex 0xF, binary 0b1111

operators: shifts << and >> (signed), >>> (unsigned), & (bit and), | (bit or), ^ (bit xor), ~ (bit not)

division / is integer division only. no autocasting like python3

**** floating point: double (64), float (32)

avoid equality testing. not internally expressed as decimal. 
https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64

**** boolean (size undef)

operators: &&, || short circuited, ! (not)
inequalities: the usual

**** char (16)

*** reference types:

***** String

note equality == versus .equals()

concantenation with +

"abc".length()

**** array types

int[], char[]
note that char[] != String
arr.length
initialize via int[] array = {...};
System.arraycopy

***** multidimensional arrays (initializing, ragged, etc)

int[][] arr = new int[10][10];

int[][] arr = { {0}, {0,1}, {0,1,2} };

* Week 2
** day 3:

*** command-line arguments

public static void main(String[] args) {...}
args contains "command line arguments"

*** conditionals and loops

**** if statements 

if (boolean) {...} else if (boolean) {...} else {...}

**** switch statements

switch (var) {
case 1:
...
break;
case 2:
...
break;
default:

}
fall through: rarely what you want, except when cases are same
switch (n % 3) {
case 0:
System.out.println("zero"); break;
case 1: case 2:
System.out.println("not zero"); break;
default:
System.out.println("negative");
}

parameter for switch should be primitive type, or in JDK7+ a String. General reference types not
supported, but you can fake it with hash codes if you deal with collisions.

Duff's device?

**** while and do-while loops

while (condition) { ... }

do { ... } while(condition);

do-while useful for when you want it to happen at least once. Ex: user prompt

**** for loop

for( init; term; inc ) {...}

exs:

for(int i = 0; i < 10; i++) {...}

for(int n = 1; n < 1_000_000; n *= 2) {...}

if you have a 'Collection' or array, 'enhanced' for loop:

int[] numbers = {8,6,7,5,3,0,9};
for (int item : numbers) {
  System.out.println(item);
}

**** continue and break

continue: goto next iteration or (inner-most) loop
break: break out of (inner-most) loop

*** methods and classes

**** static vs. non-static

     static - does not depend on an instance of a class, all instances share the same static
     variables

     i.e. 
#+BEGIN_SRC java
class Foo {

  private static int counterOne = 0;
  private int counterTwo = 0;

  public static void doThingOne() {
    System.out.println(counterOne);
    counterOne++;
  }

  public void doThingTwo() {
    System.out.println(counterTwo);
    counterTwo++;
  }

}
#+END_SRC

     calling Foo.doThingOne() makes sense, calling Foo.doThingTwo() does not. You must do:
#+BEGIN_SRC java
  Foo foo = new Foo(); 
  foo.doThingTwo();
#+END_SRC

     static methods can only access static fields

**** access modifiers

     public - accessable anywhere
     protected - accessable from same class or any subclass 
     no-modifier - accessable from same class or other classes from the same package
     private - only accessable from the same class (can be another instance)
     
     Which to use? Rule of thumb: use the most restrictive you can. This reduces the "exposed" part of
     your code and usually helps reduce complexity.

***** Immutability! 

      For data classes, it often makes sense to make it so their underlying data never changes.
1. Upside: 
   * easier to reason about (no one comes and changes the data while you aren't looking)
   * can sensibly use them in data structures like hash-tables (think of python dicts)
2. Downside: 
   extra copying

**** multiple dispatch
     can have multiple methods with the same name, but different types and number of parameters
#+BEGIN_SRC java
class Foo {
  public static void printType(int i) {
    System.out.println("that is an int");
  }
  public static void printType(double d) {
    System.out.println("that is an double");
  }
  public static void printType(int i, double d) {
    System.out.println("that is an int and a double");
  }
  public static void printType(double d, int i) {
    System.out.println("that is a double and an int");
  }
}
#+END_SRC
     
* Week 3

** day 4:

*** standard input/output/error

    # input
    System.in
    
    Usually don't use it directly, too much pain. Use java.util.Scanner (See api docs)
    
    # outputs
    System.out
    System.err

*** using Parameterized Types

    ex: a resizable array, ArrayList. Type should include what kind of thing it contains. _Could_
    use most general thing: "Object". but then you could put in anything and the type system won't
    help you. To put in Strings, use ArrayList<String>

*** in class activity

    shuffle (use java.util.Random or Math.random())


** day 5:

*** methods and classes (finish)

**** constructors
     
     How to make an immutable class to store 3d pixels? (voxels)
#+BEGIN_SRC java
public class Voxel {
  private final int x, y, z;
 
  public Voxel(int x, int y, int z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  // and more methods to get x,y,z values, compute 3D distances, etc
}
#+END_SRC
     notes:
     * constructor looks kind of like a method

     * "this" refers to this instance of class

     * "final" fields can be set exactly _once_ (can also be used in parameters to methods)

     * can have several constructors with different parameters

     * there is a default, no parameter, constructor which sets all fields to default values
       
     * not something we will do here: you can make the constructor protected or private and have
       another class construct the object. Usually called a "Factory" or "Builder". Look for
       AbstractSingletonProxyFactoryBean jokes online, but it sometimes makes sense.
       

**** Inheritance

    All classes extend Object. Can also implement interfaces.

    individual classes are a "sum type": They contain this data _and_ that data, etc as fields.

    different classes which descend from same class or implement same interface are product types:
    If "A" is an interface implemented by classes "B" and "C", then an "A" can be a "B" _or_ a "C".

    example: classes to describe a the result of a web request. but success and failure contain
    different data. e.g. success has a payload, failure has an error code. Don't confuse the two!
    put them in different classes which implement a common interface.
* Week 4
** day 6:

*** project 1 part 1 discussion

    Any questions?

*** shuffle algorithm

    discussion: 
    * What did you do? 
    * How do we know that all possibilities are equally likely?
    
**** Fisher-Yates/Knuth algorithm

     For a length N array:

     for each index k, starting at index N-1 and moving to index 0 by single steps:

     roll a random index in [0,k) and swap to position k.

** day 7:
*** sorting

    How do you know when a list is sorted?

    Sorting ideas from the audience?

**** bogo sort

     shuffle and check

     How long should this take, on average?

     See also: https://xkcd.com/1185/ slowsort stoogesort

**** bubble sort

     scan across array and fix pairwise swaps when you come to them

     the largest bubbles to the top, so that one is in the right place for sure
     
     do it again, but skip the last entry since we know it ok

     you can bail out early if you make a pass where there are no swaps
*** project work session
